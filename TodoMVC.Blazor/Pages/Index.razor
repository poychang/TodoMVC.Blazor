@page "/"
@page "/{Filter}"
@using System.Text.Json
@inject HttpClient Http

@*<p>Todos List value</p>
<div>@JsonSerializer.Serialize(Todos, new JsonSerializerOptions { WriteIndented = true })</div>*@

<header class="header">
    <h1>todos</h1>
    <input class="new-todo" placeholder="What needs to be done?" autofocus
           @ref="newTodoInput"
           @bind="NewTodo" @bind:event="oninput" @onkeyup="AddTodo" />
</header>

<!-- This section should be hidden by default and shown when there are todos -->
<section class="main">
    <span @onclick="() => CheckAll(true)">
        <input class="toggle-all" type="checkbox">
        <label for="toggle-all">Mark all as complete</label>
    </span>
    <ul class="todo-list">
        <!-- These are here just to show the structure of the list items -->
        <!-- List items should get the class `editing` when editing and `completed` when marked as completed -->
        @foreach (var todo in Todos.Where(IsVisible))
        {
            <li class="@(todo.IsDone ? "completed" : "") @(todo.IsInEdit ? "editing" : "")">
                @if (todo.IsInEdit)
                {
                    <input class="edit" @bind="todo.Title" @bind:event="oninput" @onkeyup="@(e => SaveTodo(e, todo))">
                }
                else
                {
                    <div class="view">
                        <input class="toggle" type="checkbox" @bind="todo.IsDone" @bind:event="oninput">
                        <label @ondblclick="() => EditTodo(todo)">@todo.Title</label>
                        <button class="destroy" @onclick="() => RemoveTodo(todo)"></button>
                    </div>
                }
            </li>
        }
    </ul>
</section>
<!-- This footer should hidden by default and shown when there are todos -->
<footer class="footer">
    <!-- This should be `0 items left` by default -->
    <span class="todo-count"><strong>0</strong> item left</span>
    <!-- Remove this if you don't implement routing -->
    <ul class="filters">
        <li>
            <a href="/all" class="@(string.IsNullOrEmpty(Filter) || Filter == "all" ? "selected" : "")">All</a>
        </li>
        <li>
            <a href="/active" class="@(Filter == "active" ? "selected" : "")">Active</a>
        </li>
        <li>
            <a href="/completed" class="@(Filter == "completed" ? "selected" : "")">Completed</a>
        </li>
    </ul>
    <!-- Hidden if no completed items are left ↓ -->
    <button class="clear-completed" @onclick="ClearCompleted">Clear completed</button>
</footer>

@code {
    [Parameter]
    public string Filter { get; set; }
    private ElementReference newTodoInput;
    private List<TodoItem> Todos { get; set; } = new();
    private string NewTodo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Todos = await Http.GetFromJsonAsync<List<TodoItem>>("sample-data/todo-item.json");
        await newTodoInput.FocusAsync();
    }

    void AddTodo(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            if (!string.IsNullOrWhiteSpace(NewTodo))
            {
                Todos.Add(new TodoItem { Title = NewTodo });
                NewTodo = "";
            }
        }
    }

    void EditTodo(TodoItem todo)
    {
        if (todo != null)
        {
            todo.IsInEdit = true;
        }
    }

    void SaveTodo(KeyboardEventArgs e, TodoItem todo)
    {
        if (e.Code == "Enter")
        {
            if (todo != null)
            {
                todo.IsInEdit = false;
            }
        }
    }

    void RemoveTodo(TodoItem todo)
    {
        if (todo != null)
        {
            Todos.Remove(todo);
        }
    }

    void CheckAll(bool check)
    {
        foreach (var todo in Todos)
        {
            todo.IsDone = check;
        }
    }

    void ClearCompleted()
    {
        Todos.RemoveAll(t => t.IsDone);
    }

    bool IsVisible(TodoItem todo)
    {
        return string.IsNullOrEmpty(Filter) || Filter == "all" || (Filter == "active" && !todo.IsDone) || (Filter == "completed" && todo.IsDone);
    }

    public class TodoItem
    {
        public string Title { get; set; }
        public bool IsDone { get; set; }
        public bool IsInEdit { get; set; }
    }
}
